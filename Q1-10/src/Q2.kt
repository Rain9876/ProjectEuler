/*
 Project Euler Problem2
 Yurun SONG
 2019-02-20

 Problem2:
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

fun main(args: Array<String>) {
    val results = EvenFibo().solver()
    println(results)
}

class EvenFibo {

    val limit = 4000000
    var ef0 = 2
    var ef1 = 8
    var sum = 2


    init {
        println("By considering the terms in the Fibonacci sequence whose values do not exceed four million, \n" +
                "find the sum of the even-valued terms.")
    }


    // Even Fib: Ef2 = 4 * Ef1 + Ef0
    fun solver(): Int {

        while (ef1 < limit) {

            sum += ef1

            val ef3 = 4 * ef1 + ef0

            ef0 = ef1

            ef1 = ef3

        }

        return sum

    }


    // ie. 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
    fun Nth_Fib(n: Int): Int {
        if (n <= 1) {
            return n
        } else {
            if (n % 2 == 1) {
                val k = (n + 1) / 2
                return Nth_Fib(k) * Nth_Fib(k) + Nth_Fib(k - 1) * Nth_Fib(k - 1)
            } else {
                val k = n / 2
                return (Nth_Fib(k - 1) * 2 + Nth_Fib(k)) * Nth_Fib(k)
            }

        }

    }


    // Sum of Fib: S(n-1) = F(n+1) â€“ F(1)
    fun sum_Fib(n: Int): Int {
        return Nth_Fib(n + 2) - Nth_Fib(1)
    }

}